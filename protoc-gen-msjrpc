#!/usr/bin/env python3

import sys

from google.protobuf.compiler import plugin_pb2 as plugin
from pprint import pformat, pprint

header = '''
from . import majsoul_pb2 as pb
from .msjrpc import MSJRpcService
'''
cls_tplt = '''
class {class_name}(MSJRpcService):
    _req = {{
{req_list}
    }}
    _res = {{
{res_list}
    }}

    def get_package_name(self):
        return "{package_name}"

    def get_service_name(self):
        return "{class_name}"

    def get_req_class(self, method):
        return {class_name}._req[method]

    def get_res_class(self, method):
        return {class_name}._res[method]

{func_list}
'''

dict_tplt = '"{method_name}": pb.{type_name},'

func_tplt = '''
    async def {func_name}(self, req):
        return await self.call_method("{func_name}", req)
'''

def generate_code(request, response):
    for proto_file in request.proto_file:
        proto_name = proto_file.name.rsplit(".", 1)[0]
        package_name = proto_file.package

        services = []
        for srv in proto_file.service:
            class_name = srv.name
            req_list = []
            res_list = []
            func_list = []
            for mtd in srv.method:
                func_name = mtd.name
                req_name = mtd.input_type.rsplit(".", 1)[-1]
                res_name = mtd.output_type.rsplit(".", 1)[-1]
                req_list.append(dict_tplt.format(method_name = func_name, type_name = req_name))
                res_list.append(dict_tplt.format(method_name = func_name, type_name = res_name))
                func_list.append(func_tplt.format(func_name = func_name))
            cls = cls_tplt.format(package_name = package_name,
                                  class_name = class_name,
                                  req_list = "\n".join(req_list),
                                  res_list = "\n".join(res_list),
                                  func_list = "\n".join(func_list))
            services.append(cls)

        body = "\n\n".join(services)
        src = header + "\n\n" + body
        f = response.file.add()
        f.name = proto_name + '_msjrpc.py'
        f.content = src

if __name__ == '__main__':
    # Read request message from stdin
    data = sys.stdin.buffer.read()

    # Parse request
    request = plugin.CodeGeneratorRequest()
    request.ParseFromString(data)

    # Create response
    response = plugin.CodeGeneratorResponse()

    # Generate code
    generate_code(request, response)

    # Serialise response message
    output = response.SerializeToString()

    # Write to stdout
    sys.stdout.buffer.write(output)
